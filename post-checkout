#!/usr/bin/env perl
use strict;
use warnings;
use Digest::SHA qw(sha1_hex);
use File::Copy qw(move);
use File::Copy::Recursive qw(rcopy);
use File::Path qw(mkpath remove_tree);

my ($old_HEAD, $new_HEAD, $branch_checkout) = @ARGV;

exit unless ($branch_checkout);

sub get_signature {
    my ($branch, $path) = @_;
    my $content = `git show $branch:$path 2> /dev/null`; # todo: escape
    if (($? >> 8) != 0) {
        '';
    } else {
        sha1_hex($content);
    }
}

sub local_dir_path {
    my ($signature) = @_;
    ".git/carton_local/$signature"
}

sub message {
    print @_, "\n";
}

my $old_signature = get_signature($old_HEAD, 'cpanfile');
my $new_signature = get_signature($new_HEAD, 'cpanfile');

my $need_to_save = 0;    # To save the current local/
my $need_to_restore = 0; # To restore local/
my $need_to_remove = 0;  # To remove the current local/

if (-d 'local' && $old_signature) {
    unless (-d local_dir_path($old_signature)) {
        mkpath('.git/carton_local');
        $need_to_save = 1;
    }
}
if ($new_signature && $old_signature ne $new_signature) {
    $need_to_remove = 1;
    if (-d local_dir_path($new_signature)) {
        $need_to_restore = 1;
    }
}
unless ($new_signature) {
    $need_to_remove = 1;
}

if ($need_to_save) {
    if ($need_to_remove) {
        move('local', local_dir_path($old_signature));
        message 'local is moved to ' . local_dir_path($old_signature) . '.';
    } else {
        rcopy('local', local_dir_path($old_signature));
        message 'local is copied to ' . local_dir_path($old_signature) . '.';
    }
} elsif ($need_to_remove) {
    if (-d 'local') {
        remove_tree('local');
        message 'local is removed.';
    }
}
if ($need_to_restore) {
    rcopy(local_dir_path($new_signature), 'local');
    message local_dir_path($new_signature) . ' is copied to local.';
}
